
========================================
File: /home/hasnocool/Github/active/tradingview-script-downloader/count.py
========================================
#!/usr/bin/python

import os

def get_directory_size(directory):
    total_size = 0
    for dirpath, _, filenames in os.walk(directory):
        for filename in filenames:
            file_path = os.path.join(dirpath, filename)
            total_size += os.path.getsize(file_path)
    return total_size

def format_size(size):
    # Adapted from https://stackoverflow.com/a/1094933
    units = ["B", "KB", "MB", "GB", "TB"]
    index = 0
    while size >= 1024 and index < len(units) - 1:
        size /= 1024
        index += 1
    return f"{size:.2f} {units[index]}"

# Specify the directory path you want to count files in
directory_path = "PineScripts"

file_count = sum([len(files) for _, _, files in os.walk(directory_path)])
directory_size = get_directory_size(directory_path)

print(f"The number of files in '{directory_path}' is: {file_count}")
print(f"The total size of the directory is: {format_size(directory_size)}")

========================================
File: /home/hasnocool/Github/active/tradingview-script-downloader/fetch_more.py
========================================
#!/usr/bin/python

import os
import requests
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.firefox.options import Options
import time
import concurrent.futures

# Set the path to the geckodriver executable
geckodriver_path = os.path.join(os.getcwd(), 'geckodriver')

# Configure Firefox options for headless browsing
firefox_options = Options()
firefox_options.add_argument("--headless")

# Launch Firefox WebDriver with headless options
driver = webdriver.Firefox(executable_path=geckodriver_path, options=firefox_options)

base_url = 'https://www.tradingview.com/scripts/'

def download_page(page):
    url = base_url + f'page-{page}/?script_type=strategies&script_access=open&sort=month_popular&route_range=1'
    response = requests.get(url)
    soup = BeautifulSoup(response.content, 'html.parser')

    script_items = soup.find_all('div', class_='tv-feed__item')
    if not script_items:
        return  # Return if there are no more script items on the page

    for item in script_items:
        if item.get('data-widget-type') == 'idea':
            script_data = item.get('data-widget-data')
            script_name = item.find('a', class_='tv-widget-idea__title').text.strip()
            script_author = item.find('span', class_='tv-card-user-info__name').text.strip()
            script_description = item.find('p', class_='tv-widget-idea__description-row').text.strip()
            print('Script Name:', script_name)
            print('Author:', script_author)
            print('Description:', script_description)
            print('---')

            # Extract PineScript code
            script_url = item.find('a', class_='tv-widget-idea__title').get('href')
            script_full_url = 'https://www.tradingview.com' + script_url

            # Open the script page with Firefox
            driver.get(script_full_url)
            time.sleep(1)  # Add a delay to allow the page to fully load

            try:
                # Find and expand the collapse buttons
                collapse_buttons = driver.find_elements(By.CLASS_NAME, "collapseBtn")
                for button in collapse_buttons:
                    driver.execute_script("arguments[0].click();", button)
                    time.sleep(0.5)  # Add a delay after expanding each collapse button

                # Get the PineScript code element
                script_code_element = driver.find_element(By.CLASS_NAME, "tv-chart-view__script-wrap")

                # Get the PineScript code text using innerText property
                script_code = script_code_element.get_property("innerText").strip()

                # Create directory if it doesn't exist
                directory = 'PineScripts'
                os.makedirs(directory, exist_ok=True)

                # Replace invalid characters in script name
                invalid_characters = '/\\?%*:|"<>'
                for char in invalid_characters:
                    script_name = script_name.replace(char, '-')

                # Save PineScript to a file with .pine extension
                filename = os.path.join(directory, f"{script_name}.pine")
                with open(filename, 'w') as file:
                    file.write(f"Script Name: {script_name}\n")
                    file.write(f"Author: {script_author}\n")
                    file.write(f"Description: {script_description}\n")
                    file.write("PineScript code:\n")
                    file.write(script_code)

                print(f"Saved PineScript code to {filename}\n")

            except NoSuchElementException:
                print(f"Element not found. Skipping script: {script_name}")

# Number of pages to download concurrently
num_pages = 3

with concurrent.futures.ThreadPoolExecutor() as executor:
    page_range = range(1, num_pages + 1)
    executor.map(download_page, page_range)

# Close the WebDriver
driver.quit()

========================================
File: /home/hasnocool/Github/active/tradingview-script-downloader/clean-data.py
========================================
#!/usr/bin/python

import os
import re

# Function to clean the PineScript
def clean_pinescript(script):
    lines = script.split('\n')

    # Remove numbered lines dynamically
    lines = [line for line in lines if not re.match(r"^\d+\s*$", line.strip())]

    # Find the index of "Copy code" line
    copy_code_index = -1
    for i, line in enumerate(lines):
        if line.strip() == 'Copy code':
            copy_code_index = i
            break

    # Remove the last line if it contains the word "Expand" followed by parentheses and a number
    if re.match(r"Expand \(\d+ lines\)", lines[-1].strip()):
        lines = lines[:-1]

    # Add comments to the lines preceding "Copy code"
    comment_lines = []
    for i in range(copy_code_index):
        line = lines[i].strip()
        if line:
            comment_lines.append(f"// {line}")
    lines = comment_lines + lines[copy_code_index + 1:]

    # Remove unnecessary lines and format PineScript code properly
    cleaned_script = '\n'.join(lines).strip()
    cleaned_script = cleaned_script.replace('\n\n', '\n')
    cleaned_script = cleaned_script.replace('=', ' = ')
    cleaned_script = cleaned_script.replace(':', ': ')
    cleaned_script = cleaned_script.replace('  ', ' ')
    return cleaned_script

# Specify the folder paths
input_folder = 'PineScripts'
output_folder = 'PineScripts_Cleaned'

# Create the output folder if it doesn't exist
os.makedirs(output_folder, exist_ok=True)

# Iterate through the files in the input folder
for file_name in os.listdir(input_folder):
    if file_name.endswith('.pine'):
        input_file_path = os.path.join(input_folder, file_name)
        output_file_path = os.path.join(output_folder, file_name)
        
        with open(input_file_path, 'r') as file:
            script = file.read()
        
        cleaned_script = clean_pinescript(script)
        
        with open(output_file_path, 'w') as cleaned_file:
            cleaned_file.write(cleaned_script)
        
        print(f"Cleaned script saved to: {output_file_path}")

========================================
File: /home/hasnocool/Github/active/tradingview-script-downloader/fetch_editors-picks.py
========================================
import os
import asyncio
import aiohttp
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.firefox.options import Options
import time

# Set the path to the geckodriver executable
geckodriver_path = os.path.join(os.getcwd(), 'geckodriver')

# Configure Firefox options for headless browsing
firefox_options = Options()
firefox_options.add_argument("--headless")

# Launch Firefox WebDriver with headless options
driver = webdriver.Firefox(executable_path=geckodriver_path, options=firefox_options)

base_url = 'https://www.tradingview.com/scripts/editors-picks/'

async def download_page(session, page):
    url = base_url + f'page-{page}/?script_type=strategies&script_access=open&sort=month_popular&route_range=1'

    async with session.get(url) as response:
        content = await response.text()

    soup = BeautifulSoup(content, 'html.parser')

    script_items = soup.find_all('div', class_='tv-feed__item')
    if not script_items:
        return  # Return if there are no more script items on the page

    for item in script_items:
        if item.get('data-widget-type') == 'idea':
            script_data = item.get('data-widget-data')
            script_name = item.find('a', class_='tv-widget-idea__title').text.strip()
            script_author = item.find('span', class_='tv-card-user-info__name').text.strip()
            script_description = item.find('p', class_='tv-widget-idea__description-row').text.strip()
            print('Script Name:', script_name)
            print('Author:', script_author)
            print('Description:', script_description)
            print('---')

            # Replace invalid characters in script name
            invalid_characters = '/\\?%*:|"<>'
            for char in invalid_characters:
                script_name = script_name.replace(char, '-')

            # Create directory if it doesn't exist
            directory = 'PineScripts_Editors-Picks'
            os.makedirs(directory, exist_ok=True)

            # Check if the file already exists
            filename = os.path.join(directory, f"{script_name}.pine")
            if os.path.exists(filename):
                print(f"Skipping page {page}. File already exists: {filename}\n")
                continue

            # Extract PineScript code
            script_url = item.find('a', class_='tv-widget-idea__title').get('href')
            script_full_url = 'https://www.tradingview.com' + script_url

            # Open the script page with Firefox
            driver.get(script_full_url)
            time.sleep(2)  # Add a delay to allow the page to fully load

            try:
                # Find and expand the collapse buttons
                collapse_buttons = driver.find_elements(By.CLASS_NAME, "collapseBtn")
                for button in collapse_buttons:
                    driver.execute_script("arguments[0].click();", button)
                    time.sleep(1)  # Add a delay after expanding each collapse button

                # Get the PineScript code element
                script_code_element = driver.find_element(By.CLASS_NAME, "tv-chart-view__script-wrap")

                # Get the PineScript code text using innerText property
                script_code = script_code_element.get_property("innerText").strip()

                # Save PineScript to a file with .pine extension
                with open(filename, 'w') as file:
                    file.write(f"Script Name: {script_name}\n")
                    file.write(f"Author: {script_author}\n")
                    file.write(f"Description: {script_description}\n")
                    file.write("PineScript code:\n")
                    file.write(script_code)

                print(f"Saved PineScript code to {filename}\n")

            except NoSuchElementException:
                print(f"Element not found. Skipping script: {script_name}")

async def process_pages():
    async with aiohttp.ClientSession() as session:
        page = 1
        while True:
            await download_page(session, page)
            page += 1

# Number of pages to download concurrently
num_concurrent_pages = 3

# Run the event loop
loop = asyncio.get_event_loop()
tasks = [process_pages() for _ in range(num_concurrent_pages)]
loop.run_until_complete(asyncio.gather(*tasks))

# Close the WebDriver
driver.quit()

========================================
File: /home/hasnocool/Github/active/tradingview-script-downloader/fetch.py
========================================
#!/usr/bin/python

import os
import requests
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.common.exceptions import NoSuchElementException
import time

# Set the path to the geckodriver executable
geckodriver_path = os.path.join(os.getcwd(), 'geckodriver')

# Launch Firefox WebDriver
driver = webdriver.Firefox(executable_path=geckodriver_path)

base_url = 'https://www.tradingview.com/scripts/'
page = 1

while True:
    url = base_url + f'page-{page}/?script_type=strategies&script_access=open&sort=month_popular&route_range=1'
    response = requests.get(url)
    soup = BeautifulSoup(response.content, 'html.parser')

    script_items = soup.find_all('div', class_='tv-feed__item')
    if not script_items:
        break  # Break the loop if there are no more script items on the page

    for item in script_items:
        if item.get('data-widget-type') == 'idea':
            script_data = item.get('data-widget-data')
            script_name = item.find('a', class_='tv-widget-idea__title').text.strip()
            script_author = item.find('span', class_='tv-card-user-info__name').text.strip()
            script_description = item.find('p', class_='tv-widget-idea__description-row').text.strip()
            print('Script Name:', script_name)
            print('Author:', script_author)
            print('Description:', script_description)
            print('---')

            # Extract PineScript code
            script_url = item.find('a', class_='tv-widget-idea__title').get('href')
            script_full_url = 'https://www.tradingview.com' + script_url

            # Open the script page with Firefox
            driver.get(script_full_url)
            time.sleep(2)  # Add a delay to allow the page to fully load

            try:
                # Find and expand the collapse buttons
                collapse_buttons = driver.find_elements(By.CLASS_NAME, "collapseBtn")
                for button in collapse_buttons:
                    driver.execute_script("arguments[0].click();", button)
                    time.sleep(1)  # Add a delay after expanding each collapse button

                # Get the PineScript code element
                script_code_element = driver.find_element(By.CLASS_NAME, "tv-chart-view__script-wrap")

                # Get the PineScript code text using innerText property
                script_code = script_code_element.get_property("innerText").strip()

                # Create directory if it doesn't exist
                directory = 'PineScripts'
                os.makedirs(directory, exist_ok=True)

                # Replace invalid characters in script name
                invalid_characters = '/\\?%*:|"<>'
                for char in invalid_characters:
                    script_name = script_name.replace(char, '-')

                # Save PineScript to a file with .pine extension
                filename = os.path.join(directory, f"{script_name}.pine")
                with open(filename, 'w') as file:
                    file.write(f"Script Name: {script_name}\n")
                    file.write(f"Author: {script_author}\n")
                    file.write(f"Description: {script_description}\n")
                    file.write("PineScript code:\n\n")
                    file.write(script_code)

                print(f"Saved PineScript code to {filename}\n")

            except NoSuchElementException:
                print(f"Element not found. Skipping script: {script_name}")

    page += 1

# Close the WebDriver
driver.quit()

========================================
File: /home/hasnocool/Github/active/tradingview-script-downloader/fetch_scripts.py
========================================
import os
import asyncio
import aiohttp
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.firefox.options import Options
import time

# Set the path to the geckodriver executable
geckodriver_path = os.path.join(os.getcwd(), 'geckodriver')

# Configure Firefox options for headless browsing
firefox_options = Options()
firefox_options.add_argument("--headless")

# Launch Firefox WebDriver with headless options
driver = webdriver.Firefox(executable_path=geckodriver_path, options=firefox_options)

base_url = 'https://www.tradingview.com/scripts/'

async def download_page(session, page):
    url = base_url + f'page-{page}/?script_type=strategies&script_access=open&sort=month_popular&route_range=1'

    async with session.get(url) as response:
        content = await response.text()

    soup = BeautifulSoup(content, 'html.parser')

    script_items = soup.find_all('div', class_='tv-feed__item')
    if not script_items:
        return  # Return if there are no more script items on the page

    for item in script_items:
        if item.get('data-widget-type') == 'idea':
            script_data = item.get('data-widget-data')
            script_name = item.find('a', class_='tv-widget-idea__title').text.strip()
            script_author = item.find('span', class_='tv-card-user-info__name').text.strip()
            script_description = item.find('p', class_='tv-widget-idea__description-row').text.strip()
            print('Script Name:', script_name)
            print('Author:', script_author)
            print('Description:', script_description)
            print('---')

            # Replace invalid characters in script name
            invalid_characters = '/\\?%*:|"<>'
            for char in invalid_characters:
                script_name = script_name.replace(char, '-')

            # Create directory if it doesn't exist
            directory = 'PineScripts'
            os.makedirs(directory, exist_ok=True)

            # Check if the file already exists
            filename = os.path.join(directory, f"{script_name}.pine")
            if os.path.exists(filename):
                print(f"Skipping page {page}. File already exists: {filename}\n")
                continue

            # Extract PineScript code
            script_url = item.find('a', class_='tv-widget-idea__title').get('href')
            script_full_url = 'https://www.tradingview.com' + script_url

            # Open the script page with Firefox
            driver.get(script_full_url)
            time.sleep(2)  # Add a delay to allow the page to fully load

            try:
                # Find and expand the collapse buttons
                collapse_buttons = driver.find_elements(By.CLASS_NAME, "collapseBtn")
                for button in collapse_buttons:
                    driver.execute_script("arguments[0].click();", button)
                    time.sleep(1)  # Add a delay after expanding each collapse button

                # Get the PineScript code element
                script_code_element = driver.find_element(By.CLASS_NAME, "tv-chart-view__script-wrap")

                # Get the PineScript code text using innerText property
                script_code = script_code_element.get_property("innerText").strip()

                # Save PineScript to a file with .pine extension
                with open(filename, 'w') as file:
                    file.write(f"Script Name: {script_name}\n")
                    file.write(f"Author: {script_author}\n")
                    file.write(f"Description: {script_description}\n")
                    file.write("PineScript code:\n")
                    file.write(script_code)

                print(f"Saved PineScript code to {filename}\n")

            except NoSuchElementException:
                print(f"Element not found. Skipping script: {script_name}")

async def process_pages():
    async with aiohttp.ClientSession() as session:
        page = 1
        while True:
            await download_page(session, page)
            page += 1

# Number of pages to download concurrently
num_concurrent_pages = 3

# Run the event loop
loop = asyncio.get_event_loop()
tasks = [process_pages() for _ in range(num_concurrent_pages)]
loop.run_until_complete(asyncio.gather(*tasks))

# Close the WebDriver
driver.quit()

========================================
File: /home/hasnocool/Github/active/tradingview-script-downloader/backup-data.sh
========================================
#!/bin/bash

# Set the source directory and filename
source_dir="PineScripts"
filename="Backups/PineScripts_$(date +'%Y%m%d_%H%M%S').tar.gz"
cleaned_source_dir="PineScripts_Cleaned"
cleaned_filename="Backups/PineScripts_Cleaned_$(date +'%Y%m%d_%H%M%S').tar.gz"
# Create the tar.gz archive
tar -czf "$filename" "$source_dir"
tar -czf "$cleaned_filename" "$cleaned_source_dir"
echo "Archive created: $filename"
echo "Archive created: $cleaned_filename"

========================================
File: /home/hasnocool/Github/active/tradingview-script-downloader/docker-run.sh
========================================
docker run -v "$(pwd):/app" tradingview_pinescript_downloader

========================================
File: /home/hasnocool/Github/active/tradingview-script-downloader/Dockerfile
========================================
# Use an official Python runtime as the base image
FROM python:3.9

# Set the working directory in the container
WORKDIR /app

# Install Selenium, Requests, and BeautifulSoup
RUN pip install selenium requests beautifulsoup4

# Copy the Python script to the container
COPY fetch.py .

# Set the volume to the current directory
VOLUME /app

# Run the Python script when the container launches
CMD ["python", "fetch.py"]

========================================
File: /home/hasnocool/Github/active/tradingview-script-downloader/docker-build.sh
========================================
docker build -t tradingview_pinescript_downloader .

========================================
File: /home/hasnocool/Github/active/tradingview-script-downloader/fetch_indicators.py
========================================
import os
import asyncio
import aiohttp
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.firefox.options import Options
import time

# Set the path to the geckodriver executable
geckodriver_path = os.path.join(os.getcwd(), 'geckodriver')

# Configure Firefox options for headless browsing
firefox_options = Options()
firefox_options.add_argument("--headless")

# Launch Firefox WebDriver with headless options
driver = webdriver.Firefox(executable_path=geckodriver_path, options=firefox_options)

base_url = 'https://www.tradingview.com/scripts/indicators/'

async def download_page(session, page):
    url = base_url + f'page-{page}/?script_type=strategies&script_access=open&sort=month_popular&route_range=1'

    async with session.get(url) as response:
        content = await response.text()

    soup = BeautifulSoup(content, 'html.parser')

    script_items = soup.find_all('div', class_='tv-feed__item')
    if not script_items:
        return  # Return if there are no more script items on the page

    for item in script_items:
        if item.get('data-widget-type') == 'idea':
            script_data = item.get('data-widget-data')
            script_name = item.find('a', class_='tv-widget-idea__title').text.strip()
            script_author = item.find('span', class_='tv-card-user-info__name').text.strip()
            script_description = item.find('p', class_='tv-widget-idea__description-row').text.strip()
            print('Script Name:', script_name)
            print('Author:', script_author)
            print('Description:', script_description)
            print('---')

            # Replace invalid characters in script name
            invalid_characters = '/\\?%*:|"<>'
            for char in invalid_characters:
                script_name = script_name.replace(char, '-')

            # Create directory if it doesn't exist
            directory = 'PineScripts_Indicators'
            os.makedirs(directory, exist_ok=True)

            # Check if the file already exists
            filename = os.path.join(directory, f"{script_name}.pine")
            if os.path.exists(filename):
                print(f"Skipping page {page}. File already exists: {filename}\n")
                continue

            # Extract PineScript code
            script_url = item.find('a', class_='tv-widget-idea__title').get('href')
            script_full_url = 'https://www.tradingview.com' + script_url

            # Open the script page with Firefox
            driver.get(script_full_url)
            time.sleep(2)  # Add a delay to allow the page to fully load

            try:
                # Find and expand the collapse buttons
                collapse_buttons = driver.find_elements(By.CLASS_NAME, "collapseBtn")
                for button in collapse_buttons:
                    driver.execute_script("arguments[0].click();", button)
                    time.sleep(1)  # Add a delay after expanding each collapse button

                # Get the PineScript code element
                script_code_element = driver.find_element(By.CLASS_NAME, "tv-chart-view__script-wrap")

                # Get the PineScript code text using innerText property
                script_code = script_code_element.get_property("innerText").strip()

                # Save PineScript to a file with .pine extension
                with open(filename, 'w') as file:
                    file.write(f"Script Name: {script_name}\n")
                    file.write(f"Author: {script_author}\n")
                    file.write(f"Description: {script_description}\n")
                    file.write("PineScript code:\n")
                    file.write(script_code)

                print(f"Saved PineScript code to {filename}\n")

            except NoSuchElementException:
                print(f"Element not found. Skipping script: {script_name}")

async def process_pages():
    async with aiohttp.ClientSession() as session:
        page = 1
        while True:
            await download_page(session, page)
            page += 1

# Number of pages to download concurrently
num_concurrent_pages = 3

# Run the event loop
loop = asyncio.get_event_loop()
tasks = [process_pages() for _ in range(num_concurrent_pages)]
loop.run_until_complete(asyncio.gather(*tasks))

# Close the WebDriver
driver.quit()

========================================
File: /home/hasnocool/Github/active/tradingview-script-downloader/docker-compose.yaml
========================================

========================================
File: /home/hasnocool/Github/active/tradingview-script-downloader/fetch_strategies.py
========================================
import os
import asyncio
import aiohttp
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.firefox.options import Options
import time

# Set the path to the geckodriver executable
geckodriver_path = os.path.join(os.getcwd(), 'geckodriver')

# Configure Firefox options for headless browsing
firefox_options = Options()
firefox_options.add_argument("--headless")

# Launch Firefox WebDriver with headless options
driver = webdriver.Firefox(executable_path=geckodriver_path, options=firefox_options)

base_url = 'https://www.tradingview.com/scripts/strategies/'

async def download_page(session, page):
    url = base_url + f'page-{page}/?script_type=strategies&script_access=open&sort=month_popular&route_range=1'

    async with session.get(url) as response:
        content = await response.text()

    soup = BeautifulSoup(content, 'html.parser')

    script_items = soup.find_all('div', class_='tv-feed__item')
    if not script_items:
        return  # Return if there are no more script items on the page

    for item in script_items:
        if item.get('data-widget-type') == 'idea':
            script_data = item.get('data-widget-data')
            script_name = item.find('a', class_='tv-widget-idea__title').text.strip()
            script_author = item.find('span', class_='tv-card-user-info__name').text.strip()
            script_description = item.find('p', class_='tv-widget-idea__description-row').text.strip()
            print('Script Name:', script_name)
            print('Author:', script_author)
            print('Description:', script_description)
            print('---')

            # Replace invalid characters in script name
            invalid_characters = '/\\?%*:|"<>'
            for char in invalid_characters:
                script_name = script_name.replace(char, '-')

            # Create directory if it doesn't exist
            directory = 'PineScripts_Indicators'
            os.makedirs(directory, exist_ok=True)

            # Check if the file already exists
            filename = os.path.join(directory, f"{script_name}.pine")
            if os.path.exists(filename):
                print(f"Skipping page {page}. File already exists: {filename}\n")
                continue

            # Extract PineScript code
            script_url = item.find('a', class_='tv-widget-idea__title').get('href')
            script_full_url = 'https://www.tradingview.com' + script_url

            # Open the script page with Firefox
            driver.get(script_full_url)
            time.sleep(2)  # Add a delay to allow the page to fully load

            try:
                # Find and expand the collapse buttons
                collapse_buttons = driver.find_elements(By.CLASS_NAME, "collapseBtn")
                for button in collapse_buttons:
                    driver.execute_script("arguments[0].click();", button)
                    time.sleep(1)  # Add a delay after expanding each collapse button

                # Get the PineScript code element
                script_code_element = driver.find_element(By.CLASS_NAME, "tv-chart-view__script-wrap")

                # Get the PineScript code text using innerText property
                script_code = script_code_element.get_property("innerText").strip()

                # Save PineScript to a file with .pine extension
                with open(filename, 'w') as file:
                    file.write(f"Script Name: {script_name}\n")
                    file.write(f"Author: {script_author}\n")
                    file.write(f"Description: {script_description}\n")
                    file.write("PineScript code:\n")
                    file.write(script_code)

                print(f"Saved PineScript code to {filename}\n")

            except NoSuchElementException:
                print(f"Element not found. Skipping script: {script_name}")

async def process_pages():
    async with aiohttp.ClientSession() as session:
        page = 1
        while True:
            await download_page(session, page)
            page += 1

# Number of pages to download concurrently
num_concurrent_pages = 3

# Run the event loop
loop = asyncio.get_event_loop()
tasks = [process_pages() for _ in range(num_concurrent_pages)]
loop.run_until_complete(asyncio.gather(*tasks))

# Close the WebDriver
driver.quit()
